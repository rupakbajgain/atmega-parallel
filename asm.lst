   1               	# 1 "asm.S"
   1               	#define __SFR_OFFSET 0
   0               	
   0               	
   2               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   2               	   Copyright (c) 2007, Dean Camera
   3               	
   4               	   All rights reserved.
   5               	
   6               	   Redistribution and use in source and binary forms, with or without
   7               	   modification, are permitted provided that the following conditions are met:
   8               	
   9               	   * Redistributions of source code must retain the above copyright
  10               	     notice, this list of conditions and the following disclaimer.
  11               	
  12               	   * Redistributions in binary form must reproduce the above copyright
  13               	     notice, this list of conditions and the following disclaimer in
  14               	     the documentation and/or other materials provided with the
  15               	     distribution.
  16               	
  17               	   * Neither the name of the copyright holders nor the names of
  18               	     contributors may be used to endorse or promote products derived
  19               	     from this software without specific prior written permission.
  20               	
  21               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31               	  POSSIBILITY OF SUCH DAMAGE. */
  32               	
  33               	/* $Id: interrupt.h,v 1.25.2.1 2008/01/05 06:33:11 dmix Exp $ */
  34               	
  35               	#ifndef _AVR_INTERRUPT_H_
  36               	#define _AVR_INTERRUPT_H_
  37               	
  38               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52.2.28 2009/12/20 17:02:53 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
   1               	/* Copyright (c) 2002, Steinar Haugen
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
 223               	#elif defined (__AVR_ATmega329__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega406__)
 234               	#  include <avr/iom406.h>
 235               	#elif defined (__AVR_ATmega16__)
 236               	#  include <avr/iom16.h>
 237               	#elif defined (__AVR_ATmega16A__)
 238               	#  include <avr/iom16a.h>
 239               	#elif defined (__AVR_ATmega161__)
 240               	#  include <avr/iom161.h>
 241               	#elif defined (__AVR_ATmega162__)
 242               	#  include <avr/iom162.h>
 243               	#elif defined (__AVR_ATmega163__)
 244               	#  include <avr/iom163.h>
 245               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 246               	#  include <avr/iom164.h>
 247               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 248               	#  include <avr/iom165.h>
 249               	#elif defined (__AVR_ATmega165P__)
 250               	#  include <avr/iom165p.h>
 251               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 252               	#  include <avr/iom168.h>
 253               	#elif defined (__AVR_ATmega168P__)
 254               	#  include <avr/iom168p.h>
 255               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 256               	#  include <avr/iom169.h>
 257               	#elif defined (__AVR_ATmega169P__)
 258               	#  include <avr/iom169p.h>
 259               	#elif defined (__AVR_ATmega169PA__)
 260               	#  include <avr/iom169pa.h>
 261               	#elif defined (__AVR_ATmega8HVA__)
 262               	#  include <avr/iom8hva.h>
 263               	#elif defined (__AVR_ATmega16HVA__)
 264               	#  include <avr/iom16hva.h>
 265               	#elif defined (__AVR_ATmega16HVA2__)
 266               	#  include <avr/iom16hva2.h>
 267               	#elif defined (__AVR_ATmega16HVB__)
 268               	#  include <avr/iom16hvb.h>
 269               	#elif defined (__AVR_ATmega8__)
 270               	#  include <avr/iom8.h>
 271               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 272               	#  include <avr/iom48.h>
 273               	#elif defined (__AVR_ATmega48P__)
 274               	#  include <avr/iom48p.h>
 275               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 276               	#  include <avr/iom88.h>
 277               	#elif defined (__AVR_ATmega88P__)
 278               	#  include <avr/iom88p.h>
 279               	#elif defined (__AVR_ATmega88PA__)
 280               	#  include <avr/iom88pa.h>
 281               	#elif defined (__AVR_ATmega8515__)
 282               	#  include <avr/iom8515.h>
 283               	#elif defined (__AVR_ATmega8535__)
 284               	#  include <avr/iom8535.h>
 285               	#elif defined (__AVR_AT90S8535__)
 286               	#  include <avr/io8535.h>
 287               	#elif defined (__AVR_AT90C8534__)
 288               	#  include <avr/io8534.h>
 289               	#elif defined (__AVR_AT90S8515__)
 290               	#  include <avr/io8515.h>
 291               	#elif defined (__AVR_AT90S4434__)
 292               	#  include <avr/io4434.h>
 293               	#elif defined (__AVR_AT90S4433__)
 294               	#  include <avr/io4433.h>
 295               	#elif defined (__AVR_AT90S4414__)
 296               	#  include <avr/io4414.h>
 297               	#elif defined (__AVR_ATtiny22__)
 298               	#  include <avr/iotn22.h>
 299               	#elif defined (__AVR_ATtiny26__)
 300               	#  include <avr/iotn26.h>
 301               	#elif defined (__AVR_AT90S2343__)
 302               	#  include <avr/io2343.h>
 303               	#elif defined (__AVR_AT90S2333__)
 304               	#  include <avr/io2333.h>
 305               	#elif defined (__AVR_AT90S2323__)
 306               	#  include <avr/io2323.h>
 307               	#elif defined (__AVR_AT90S2313__)
 308               	#  include <avr/io2313.h>
 309               	#elif defined (__AVR_ATtiny2313__)
 310               	#  include <avr/iotn2313.h>
 311               	#elif defined (__AVR_ATtiny2313A__)
 312               	#  include <avr/iotn2313a.h>
 313               	#elif defined (__AVR_ATtiny13__)
 314               	#  include <avr/iotn13.h>
 315               	#elif defined (__AVR_ATtiny13A__)
 316               	#  include <avr/iotn13a.h>
 317               	#elif defined (__AVR_ATtiny25__)
 318               	#  include <avr/iotn25.h>
 319               	#elif defined (__AVR_ATtiny4313__)
 320               	#  include <avr/iotn4313.h>
 321               	#elif defined (__AVR_ATtiny45__)
 322               	#  include <avr/iotn45.h>
 323               	#elif defined (__AVR_ATtiny85__)
 324               	#  include <avr/iotn85.h>
 325               	#elif defined (__AVR_ATtiny24__)
 326               	#  include <avr/iotn24.h>
 327               	#elif defined (__AVR_ATtiny24A__)
 328               	#  include <avr/iotn24a.h>
 329               	#elif defined (__AVR_ATtiny44__)
 330               	#  include <avr/iotn44.h>
 331               	#elif defined (__AVR_ATtiny44A__)
 332               	#  include <avr/iotn44a.h>
 333               	#elif defined (__AVR_ATtiny84__)
 334               	#  include <avr/iotn84.h>
 335               	#elif defined (__AVR_ATtiny261__)
 336               	#  include <avr/iotn261.h>
 337               	#elif defined (__AVR_ATtiny261A__)
 338               	#  include <avr/iotn261a.h>
 339               	#elif defined (__AVR_ATtiny461__)
 340               	#  include <avr/iotn461.h>
 341               	#elif defined (__AVR_ATtiny461A__)
 342               	#  include <avr/iotn461a.h>
 343               	#elif defined (__AVR_ATtiny861__)
 344               	#  include <avr/iotn861.h>
 345               	#elif defined (__AVR_ATtiny861A__)
 346               	#  include <avr/iotn861a.h>
 347               	#elif defined (__AVR_ATtiny43U__)
 348               	#  include <avr/iotn43u.h>
 349               	#elif defined (__AVR_ATtiny48__)
 350               	#  include <avr/iotn48.h>
 351               	#elif defined (__AVR_ATtiny88__)
 352               	#  include <avr/iotn88.h>
 353               	#elif defined (__AVR_ATtiny87__)
 354               	#  include <avr/iotn87.h>
 355               	#elif defined (__AVR_ATtiny167__)
 356               	#  include <avr/iotn167.h>
 357               	#elif defined (__AVR_AT90SCR100__)
 358               	#  include <avr/io90scr100.h>
 359               	#elif defined (__AVR_ATxmega16A4__)
 360               	#  include <avr/iox16a4.h>
 361               	#elif defined (__AVR_ATxmega16D4__)
 362               	#  include <avr/iox16d4.h>
 363               	#elif defined (__AVR_ATxmega32A4__)
 364               	#  include <avr/iox32a4.h>
 365               	#elif defined (__AVR_ATxmega32D4__)
 366               	#  include <avr/iox32d4.h>
 367               	#elif defined (__AVR_ATxmega64A1__)
 368               	#  include <avr/iox64a1.h>
 369               	#elif defined (__AVR_ATxmega64A3__)
 370               	#  include <avr/iox64a3.h>
 371               	#elif defined (__AVR_ATxmega64D3__)
 372               	#  include <avr/iox64d3.h>
 373               	#elif defined (__AVR_ATxmega128A1__)
 374               	#  include <avr/iox128a1.h>
 375               	#elif defined (__AVR_ATxmega128A3__)
 376               	#  include <avr/iox128a3.h>
 377               	#elif defined (__AVR_ATxmega128D3__)
 378               	#  include <avr/iox128d3.h>
 379               	#elif defined (__AVR_ATxmega192A3__)
 380               	#  include <avr/iox192a3.h>
 381               	#elif defined (__AVR_ATxmega192D3__)
 382               	#  include <avr/iox192d3.h>
 383               	#elif defined (__AVR_ATxmega256A3__)
 384               	#  include <avr/iox256a3.h>
 385               	#elif defined (__AVR_ATxmega256A3B__)
 386               	#  include <avr/iox256a3b.h>
 387               	#elif defined (__AVR_ATxmega256D3__)
 388               	#  include <avr/iox256d3.h>
 389               	#elif defined (__AVR_ATA6289__)
 390               	#  include <avr/ioa6289.h>
 391               	/* avr1: the following only supported for assembler programs */
 392               	#elif defined (__AVR_ATtiny28__)
 393               	#  include <avr/iotn28.h>
 394               	#elif defined (__AVR_AT90S1200__)
 395               	#  include <avr/io1200.h>
 396               	#elif defined (__AVR_ATtiny15__)
 397               	#  include <avr/iotn15.h>
 398               	#elif defined (__AVR_ATtiny12__)
 399               	#  include <avr/iotn12.h>
 400               	#elif defined (__AVR_ATtiny11__)
 401               	#  include <avr/iotn11.h>
 402               	#else
 403               	#  if !defined(__COMPILING_AVR_LIBC__)
 404               	#    warning "device type not defined"
 405               	#  endif
 406               	#endif
 407               	
 408               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 409               	
 410               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 411               	
 412               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 413               	
 414               	/* Include fuse.h after individual IO header files. */
 415               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 416               	
 417               	/* Include lock.h after individual IO header files. */
 418               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 419               	
  39               	
   3               	
   4               	;Max threads using 64bytes stack <32;
   5               	;So let out max be 24
   6               	#define MAX_THREADS 24
   7               	#define TASK_INDEX RAMEND
   8               	#define ENERGY TASK_INDEX-1
   9               	#define TPRIORITY_BASE ENERGY-1
  10               	#define SP_BACKUP_BASE (TPRIORITY_BASE-MAX_THREADS)
  11               	#define STACK_START SP_BACKUP_BASE-2*MAX_THREADS
  12               	;for optimization - let the code be dirty
  13               	;Every code used commeneted may be required later but not now
  14               	;sbc &adc commands are commented as they are not required for fix address//computation
  15               	;No need to load hi8 two times as they don't change
  16               	;fix jmp with rjmp
  17               	.extern init
  18               	
  19               	.section .text
  20               	.global setStackBase
  21               	setStackBase:
  22               	;24=pointer to function
  23               	;22=i
  24               	;20=stack
  25               	;18=par
  26               	;16=priority
  27               		;make sure r1=0
  28:asm.S         **** 	ldi r30,lo8(TPRIORITY_BASE)
  29:asm.S         **** 	ldi r31,hi8(TPRIORITY_BASE)
  30:asm.S         **** 	sub r30,r22
  31               		;sbc r31,r1
  32:asm.S         **** 	st z,r16
  33:asm.S         **** 	ldi r30,lo8(SP_BACKUP_BASE)
  34               		;ldi r31,hi8(SP_BACKUP_BASE)   ;z=SP_BACKUP_BASE
  35:asm.S         **** 	lsl r22               ;22(i) is 2*i now
  36:asm.S         **** 	sub r30,r22
  37:asm.S         **** 	sbc r31,r1                    ;z==CURRENT_SP_BACKUP
  38:asm.S         **** 	movw r26,r20           ;save 21:20 to 27:26
  39:asm.S         **** 	sbiw r26,35                   ;z=StackAddr-35
  40:asm.S         **** 	st z,r26
  41:asm.S         **** 	st -z,r27
  42               		;;
  43:asm.S         **** 	movw r30,r26           ; 31:30=27:26
  44               		;set sreg to 0,simulator complains
  45:asm.S         **** 	std z+1,r1
  46               	   ;set r1=0 before calling C
  47:asm.S         **** 	std z+3,r1
  48               		;r25:r24 is parameter  in our r19:r18
  49:asm.S         **** 	std z+27,r19
  50:asm.S         **** 	std z+26,r18
  51:asm.S         **** 	movw r30,r20
  52               		;;;;Pointer here
  53:asm.S         **** 	st z,r24                       ;z=func()
  54:asm.S         **** 	st -z,r25
  55:asm.S         **** ret
  56               	
  57               	
  58               	.section .text
  59               	.global TIMER0_OVF_vect
  60               	TIMER0_OVF_vect:
  61               	;is context switch required???
  62:asm.S         **** 	push r31
  63:asm.S         **** 	push r30
  64:asm.S         **** 	clr r30
  65:asm.S         **** 	lds r31,ENERGY
  66:asm.S         **** 	cp r31,r30
  67:asm.S         **** 	breq 2f
  68:asm.S         **** 	dec r31
  69:asm.S         **** 	sts ENERGY,r31
  70:asm.S         **** 	pop r31
  71:asm.S         **** 	pop r30
  72:asm.S         **** 	reti
  73               		2:
  74:asm.S         ****    push r29
  75:asm.S         ****    push r28
  76:asm.S         ****    push r27
  77:asm.S         ****    push r26
  78:asm.S         ****    push r25
  79:asm.S         ****    push r24
  80:asm.S         ****    push r23
  81:asm.S         ****    push r22
  82:asm.S         ****    push r21
  83:asm.S         ****    push r20
  84:asm.S         ****    push r19
  85:asm.S         ****    push r18
  86:asm.S         ****    push r17
  87:asm.S         ****    push r16
  88:asm.S         ****    push r15
  89:asm.S         ****    push r14
  90:asm.S         ****    push r13
  91:asm.S         ****    push r12
  92:asm.S         ****    push r11
  93:asm.S         ****    push r10
  94:asm.S         ****    push r9
  95:asm.S         ****    push r8
  96:asm.S         ****    push r7
  97:asm.S         ****    push r6
  98:asm.S         ****    push r5
  99:asm.S         ****    push r4
 100:asm.S         ****    push r3
 101:asm.S         ****    push r2
 102:asm.S         ****    push r1
 103:asm.S         ****    push r0
 104:asm.S         ****    in r17,SREG
 105:asm.S         ****    push r17
 106               	;Context switch next
 107:asm.S         **** 	lds r24,TASK_INDEX
 108:asm.S         **** 	clr r1
 109:asm.S         **** 	ldi r30,lo8(SP_BACKUP_BASE)
 110:asm.S         **** 	ldi r31,hi8(SP_BACKUP_BASE)
 111:asm.S         **** 	lsl r24
 112:asm.S         **** 	sub r30,r24
 113:asm.S         **** 	sbc r31,r1
 114:asm.S         **** 	in r17,SPL
 115:asm.S         **** 	st z,r17
 116:asm.S         **** 	in r17,SPH
 117:asm.S         **** 	st -z,r17
 118:asm.S         **** 	lsr r24
 119               	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 120               	;;Scheduling
 121               	0:
 122:asm.S         **** dec r24
 123:asm.S         **** brmi 1f
 124:asm.S         **** rjmp 2f
 125               	1:
 126:asm.S         **** ldi r24,(MAX_THREADS-1)
 127               	2:
 128:asm.S         **** ldi r30,lo8(TPRIORITY_BASE)
 129:asm.S         **** ldi r31,hi8(TPRIORITY_BASE)
 130:asm.S         **** sub r30,r24
 131:asm.S         **** ld r16,z   ;energy read here
 132:asm.S         **** cp r16,r1
 133:asm.S         **** breq 0b
 134:asm.S         **** sts ENERGY,r16
 135               	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 136:asm.S         ****    sts TASK_INDEX,r24
 137:asm.S         ****    ldi r30,lo8(SP_BACKUP_BASE)
 138:asm.S         **** 	ldi r31,hi8(SP_BACKUP_BASE)
 139:asm.S         **** 	lsl r24
 140:asm.S         **** 	sub r30,r24                ;r24 is not used downward
 141:asm.S         **** 	sbc r31,r1
 142:asm.S         **** 	ld r17,z
 143:asm.S         **** 	out SPL,r17
 144:asm.S         **** 	ld r17,-z
 145:asm.S         **** 	out SPH,r17
 146               	;Context switched
 147:asm.S         **** 	pop r17
 148:asm.S         **** 	cbr r17,7               ;cli first
 149:asm.S         **** 	out SREG,r17
 150:asm.S         ****    pop r0
 151:asm.S         ****    pop r1
 152:asm.S         ****    pop r2
 153:asm.S         ****    pop r3
 154:asm.S         ****    pop r4
 155:asm.S         ****    pop r5
 156:asm.S         ****    pop r6
 157:asm.S         ****    pop r7
 158:asm.S         ****    pop r8
 159:asm.S         ****    pop r9
 160:asm.S         ****    pop r10
 161:asm.S         ****    pop r11
 162:asm.S         ****    pop r12
 163:asm.S         ****    pop r13
 164:asm.S         ****    pop r14
 165:asm.S         ****    pop r15
 166:asm.S         ****    pop r16
 167:asm.S         ****    pop r17
 168:asm.S         ****    pop r18
 169:asm.S         ****    pop r19
 170:asm.S         ****    pop r20
 171:asm.S         ****    pop r21
 172:asm.S         ****    pop r22
 173:asm.S         ****    pop r23
 174:asm.S         ****    pop r24
 175:asm.S         ****    pop r25
 176:asm.S         ****    pop r26
 177:asm.S         ****    pop r27
 178:asm.S         ****    pop r28
 179:asm.S         ****    pop r29
 180:asm.S         ****    pop r30
 181:asm.S         ****    pop r31
 182:asm.S         **** reti
 183               	
 184               	.section .text
 185               	.global main
 186               	main:
 187:asm.S         **** ldi r24,2  ;initilizing timer0
 188:asm.S         **** out TCCR0,r24
 189:asm.S         **** ldi r20,(1<<TOIE0)
 190:asm.S         **** out TIMSK,r20 ;timer initialization complete
 191               	;Set stack for main thread
 192:asm.S         **** ldi r20,hi8(STACK_START)
 193:asm.S         **** out SPH,r20
 194:asm.S         **** ldi r20,lo8(STACK_START)
 195:asm.S         **** out SPL,r20
 196               	;initialization here
 197:asm.S         **** clr r1
 198:asm.S         **** ldi r30,lo8(TPRIORITY_BASE+1)
 199:asm.S         **** ldi r31,hi8(TPRIORITY_BASE+1)
 200:asm.S         **** ldi r16,(MAX_THREADS+1)    ;setting all priority to 0
 201               	1:
 202:asm.S         **** st -z,r1
 203:asm.S         **** dec r16
 204:asm.S         **** brne 1b
 205:asm.S         **** sts TASK_INDEX,r1
 206:asm.S         **** call init
 207:asm.S         **** sei           ;enable interrupt
 208:asm.S         **** 1: rjmp 1b
 209               	.end
DEFINED SYMBOLS
               asm.S:21     .text:00000000 setStackBase
               asm.S:60     .text:0000002a __vector_11
               asm.S:186    .text:00000114 main

UNDEFINED SYMBOLS
init
